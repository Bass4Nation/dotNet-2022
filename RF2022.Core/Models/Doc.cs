// <auto-generated />
// https://app.quicktype.io/
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using RandomFacts.Models;
//
//    var doc = Doc.FromJson(jsonString);

namespace RF2022.Core.Models
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Doc
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("content")]
        public string Content { get; set; }
    }

    public partial class Doc
    {
        public static List<Doc> FromJson(string json) => JsonConvert.DeserializeObject<List<Doc>>(json, RF2022.Core.Models.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this List<Doc> self) => JsonConvert.SerializeObject(self, RF2022.Core.Models.Converter.Settings);
        public static string SoloToJson(this Doc self) => JsonConvert.SerializeObject(self, RF2022.Core.Models.Converter.Settings);

    }



    public partial class Doc
    {
        public static Doc FromSoloJson(string json) => JsonConvert.DeserializeObject<Doc>(json, RF2022.Core.Models.Converter.Settings);
    }

    //public static class Serialize
    //{
    //    public static string ToSoloJson(this Doc self) => JsonConvert.SerializeObject(self, RandomFacts.Models.Converter.Settings);
    //}


    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}