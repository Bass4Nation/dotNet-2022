// <auto-generated />
// https://app.quicktype.io/


namespace RandomFact.Core.Models
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Doc : INotifyPropertyChanged
    {
        private string _Title, _Content;
        private long _Id;

            [JsonProperty("id")]
            public long Id
        {
            get => _Id;
            set
            {
                _Id = value;
                OnPropertyChanged("Id");
            }
        }

        [JsonProperty("title")]
        public string Title
        {
            get => _Title;
            set
            {
                _Title = value;
                OnPropertyChanged("Title");
            }
        }

        [JsonProperty("content")]
        public string Content
        {
            get => _Content;
            set
            {
                _Content = value;
                OnPropertyChanged("Content");
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        //public Doc()
        //{
        //    if (DesignMode.DesignModeEnabled)
        //    {

        //    } 
        //}

        private void OnPropertyChanged(string propertyName)
        {
            if (PropertyChanged != null)
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }


    }

    public partial class Doc
    {
        public static List<Doc> FromJson(string json) => JsonConvert.DeserializeObject<List<Doc>>(json, RandomFact.Core.Models.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this List<Doc> self) => JsonConvert.SerializeObject(self, RandomFact.Core.Models.Converter.Settings);
        public static string SoloToJson(this Doc self) => JsonConvert.SerializeObject(self, RandomFact.Core.Models.Converter.Settings);

    }



    public partial class Doc
    {
        public static Doc FromSoloJson(string json) => JsonConvert.DeserializeObject<Doc>(json, RandomFact.Core.Models.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}